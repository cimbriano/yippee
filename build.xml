<?xml version="1.0"?>

<project name="yippee" basedir=".">

    <!-- define project vars -->
    <property name="project.root" location="${basedir}"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="tst.dir" value="${basedir}/test"/>
    <property name="db.dir" value="${basedir}/db"/>
    <property name="log.dir" value="${basedir}/log"/>
    <property name="out.dir" value="${basedir}/build"/>
    <property name="jar.dir" value="${basedir}/build"/>
    <property name="web.dir" value="${basedir}/web"/>
    <property name="bin.dir" value="${basedir}/bin"/>

    <target name="usage" description="Print the usage of ant scripts">
        <echo>
            2012, Yippee Project.

            For a laconic summary run 'ant -p'.


            Useful ant targets (see below for details):

            1. project-test-pastry
            2. project-test-crawler


            Ant target details:

            1. ant project-test-pastry -DbIp=[ip]

            [ip]: External ip (e.g., the one returned by ifconfig/ipconfig

            The project run target sets up four pastry nodes, at predefined
            ports:
            * 9001 for node 1 (bootstrap)
            * 9002 for node 2
            * 9003 for node 3
            * 9004 for node 4

            Refer to the README file for more information.


            2. ant project-test-crawler -DbIp=[ip]

            [ip]: External ip (e.g., the one returned by ifconfig/ipconfig

            The project run target sets up one pastry node running the crawler.

            A an elegant way to get the ip automatically would be to use
            ifconfig
            when running the ant target. To get the result of ifconfig you can
            do
            `ifconfig`; for instance, to launch the first target, I can always
            do
            ant project-test-pastry \
            -DbIp=`ifconfig wlan0 | grep addr: | awk '{print $2}' | sed
            "s/addr://"`


            3. ant project-prod-crawler -DbIp=[ip] -Dbport=[port] -Dlport=[port]

            [ip]: External ip (e.g., the one returned by ifconfig/ipconfig
            [port]: Port of the bootstrap node and localnode (they must be
            the same for bootstrap node).

            The project run target sets up one pastry node running the crawler.

        </echo>

    </target>

    <!-- one of the many ways of doing so -->
    <property name="main-class" value="com.yippee.util.EntryPoint"/>
    <property name="hadoop-class" value="com.yippee.pagerank.PageRank"/>
    <property name="hadoop-example" value="com.yippee.pagerank.WordCount"/>

    <!-- We are going to make this modular -->
    <property name="server" value="tomcat"/>
    <property name="jetty.home"
              value="/media/w7/Projects/UPenn/cis555/jetty-6.1.26"/>
    <property name="tomcat.home"
              value="/home/nikos/Desktop/dsk/latest/apache-tomcat-5.5.35"/>

    <condition property="params.set">
        <and>
            <isset property="bIp"/>
        </and>
    </condition>

    <target name="check">
        <fail unless="params.set">
            Must specify the parameter bIp: Run "ant [target]
            -DbIp=[external ip]
        </fail>
    </target>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>
    <path id="application" location="${jar.dir}/${ant.project.name}.jar"/>

    <target name="sanity-check" depends="check">
        <echo>" Root:. . . . .${project.root}"</echo>
        <echo>" Lib: . . . . .${lib.dir}"</echo>
        <echo>" Pastry Ip: . .${bIp}"</echo>
    </target>

    <target name="clean">
        <delete dir="${out.dir}"/>
    </target>
    <target name="clean-database" description="Clean test and integ DBs">
        <delete dir="${db.dir}/integ/">
            <exclude name="**/.gitignore"/>
        </delete>
        <delete dir="${db.dir}/test/">
            <exclude name="**/.gitignore"/>
        </delete>
    </target>
    <target name="clean-log">
        <delete dir="${log.dir}">
            <exclude name="**/log4j.properties"/>
        </delete>
        <touch file="${log.dir}/root.log"/>
        <touch file="${log.dir}/util.log"/>
        <touch file="${log.dir}/crawler.log"/>
        <touch file="${log.dir}/pastry.log"/>
        <touch file="${log.dir}/indexer.log"/>
        <touch file="${log.dir}/pagerank.log"/>
    </target>

    <target name="compile" depends="pastry-conf">
        <mkdir dir="${out.dir}/classes"/>
        <javac srcdir="${src.dir}" destdir="${out.dir}/classes"
               classpathref="classpath"/>
    </target>

    <target name="jar" depends="compile, pastry-revert">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar"
             basedir="${out.dir}/classes">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
    </target>

    <target name="hadoop-jar" depends="compile, pastry-revert">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar"
             basedir="${out.dir}/classes">
            <manifest>
                <attribute name="Main-Class" value="${hadoop-class}"/>
            </manifest>
        </jar>
    </target>

    <target name="hadoop-example" depends="compile, pastry-revert">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar"
             basedir="${out.dir}/classes">
            <manifest>
                <attribute name="Main-Class" value="${hadoop-example}"/>
            </manifest>
        </jar>
    </target>

    <condition property="isWindows">
        <os family="windows"/>
    </condition>

    <target name="pastry-conf" if="isWindows">
        <echo message="Patching for TJ...."/>
        <replace dir="${src.dir}"
                 value='/*[tj-let-ant-resolve]*/ System.out.println("This is patched for TJ"); this.env.getParameters().setString("pastry_socket_allow_loopback","true" );'>
            <include name="**/*.java"/>
            <replacetoken>/*[tj-let-ant-resolve]*/</replacetoken>
        </replace>
        <!-- do whatever you want to do here for Mac systems -->
    </target>

    <target name="pastry-revert" if="isWindows">
        <echo message="Reverting for TJ...."/>
        <replace dir="${src.dir}" value='/*[tj-let-ant-resolve]*/'>
            <include name="**/*.java"/>
            <replacetoken>/*[tj-let-ant-resolve]*/ System.out.println("This is
                patched for TJ");
                this.env.getParameters().setString("pastry_socket_allow_loopback","true"
                );
            </replacetoken>
        </replace>
        <!-- do whatever you want to do here for Mac systems -->
    </target>
    <!--
    Arguments are:
        *   local port
        *   boot ip
        *   boot port
        *   url feed file path
        *   database path
    -->
    <target name="run" depends="jar">
        <java fork="true" classname="${main-class}">
            <classpath>
                <path refid="classpath"/>
                <path refid="application"/>
            </classpath>
            <!-- in case we need to add arguments -->
            <arg value="${localPort}"/>
            <arg value="${bIp}"/>
            <arg value="${bootPort}"/>
            <arg value="feed.url"/>
            <arg value="${database}"/>
            <arg value="${service}"/>
            <arg value="${lastArg}"/>
        </java>
    </target>

    <target name="project-clean" depends="clean,jar"
            description="Clear resources and build jar"/>

    <target name="project-test-crawler" depends="project-clean,sanity-check"
            description="Create single-noded crawler">
        <antcall target="run">
            <param name="localPort" value="9001"/>
            <param name="bootPort" value="9001"/>
            <param name="database" value="db/test"/>
            <param name="service" value="-PC"/>
            <param name="lastArg" value="--overwrite"/>
        </antcall>
    </target>

    <target name="project-prod-crawler" depends="project-clean,sanity-check"
            description="Create single-noded crawler">
        <antcall target="run">
            <param name="localPort" value="${lport}"/>
            <param name="bootPort" value="${bport}"/>
            <param name="database" value="db/prod"/>
            <param name="service" value="-PC"/>
            <param name="lastArg" value="--overwrite"/>
        </antcall>
    </target>

    <target name="project-test-indexer" depends="project-clean,sanity-check"
            description="Create single-noded crawler">
        <antcall target="run">
            <param name="localPort" value="10001"/>
            <param name="bootPort" value="10001"/>
            <param name="database" value="db/test"/>
            <param name="service" value="-PI"/>
            <param name="lastArg" value="--overwrite"/>
        </antcall>
    </target>

    <!-- start 4 applications in parallel -->
    <target name="project-test-pastry" depends="project-clean,sanity-check"
            description="Create 4 application nodes for testing">
        <parallel>
            <antcall target="run">
                <param name="localPort" value="9001"/>
                <param name="bootPort" value="9001"/>
                <param name="database" value="db/integ/node1"/>
                <param name="service" value="-PCI"/>
                <param name="lastArg" value="--overwrite"/>
            </antcall>
            <antcall target="run">
                <param name="localPort" value="9002"/>
                <param name="bootPort" value="9001"/>
                <param name="database" value="db/integ/node2"/>
                <param name="service" value="-PCI"/>
                <param name="lastArg" value="--overwrite"/>
            </antcall>
            <antcall target="run">
                <param name="localPort" value="9003"/>
                <param name="bootPort" value="9001"/>
                <param name="database" value="db/integ/node3"/>
                <param name="service" value="-PCI"/>
                <param name="lastArg" value="--overwrite"/>
            </antcall>
            <antcall target="run">
                <param name="localPort" value="9004"/>
                <param name="bootPort" value="9001"/>
                <param name="database" value="db/integ/node4"/>
                <param name="service" value="-PCI"/>
                <param name="lastArg" value="--overwrite"/>
            </antcall>
        </parallel>
    </target>

    <target name="project-test-single-pastry"
            depends="project-clean,sanity-check"
            description="Launch only pastry">
        <parallel>
        <antcall target="run">
            <param name="localPort" value="${lport}"/>
            <param name="bootPort" value="${bport}"/>
            <param name="database" value="db/test"/>
            <param name="lastArg" value="--overwrite"/>
            </antcall>
        </parallel>
    </target>

    <target name="project-test-single-crawler"
            depends="project-clean"
            description="Launch only the crawler">
        <parallel>
        <antcall target="run">
            <param name="localPort" value="0"/>
            <param name="bIp" value="0"/>
            <param name="bootPort" value="0"/>
            <param name="database" value="db/test"/>
            <param name="service" value="-C"/>
            <param name="lastArg" value="--overwrite"/>
            </antcall>
        </parallel>
    </target>

    <target name="run-db" depends="jar">
        <echo>" Pastry Port: .${bootPort}"</echo>
        <java fork="true" classname="${main-class}">
            <classpath>
                <path refid="classpath"/>
                <path refid="application"/>
            </classpath>
            <!-- in case we need to add arguments -->
            <arg value="${database}"/>
            <arg value="${lastArg}"/>
        </java>
    </target>

    <target name="check-database"
            depends="project-clean"
            description="Check the database">
        <parallel>
        <antcall target="run-db">
            <param name="database" value="${B}"/>
            <param name="lastArg" value="--status"/>
            </antcall>
        </parallel>
    </target>

    <!-- Run Tests -->

    <target name="Test" depends="jar" description="Run all tests">
        <junit printsummary="yes">
            <classpath>
                <path refid="classpath"/>
                <path refid="application"/>
            </classpath>

            <batchtest fork="yes">
                <fileset dir="${tst.dir}" includes="*Test.java"/>
                <param name="database" value="db/integ/node1"/>
            </batchtest>
        </junit>
    </target>

    <!-- ================================================================== -->
    <!--            Tomcat/Jetty targets (front-end deployment)             -->
    <!-- ================================================================== -->

    <!-- Change this depending on tomcat or jetty; I am using jetty -->
    <property name="server" value="tomcat"/>
    <property name="jetty.home"
              value="/media/w7/Projects/UPenn/cis555/jetty-6.1.26"/>
    <property name="tomcat.home"
              value="/home/nikos/Desktop/dsk/latest/apache-tomcat-5.5.35"/>

    <target name="print-vars">
        <echo>" JETTY HOME: ${jetty.home}"</echo>
        <echo>" TOMCAT HOME: ${tomcat.home}"</echo>
    </target>

    <property name="war.name" value="yippee"/>

    <!-- add statistics -->
    <target name="update-info">
        <exec executable="/bin/sh">
            <arg line='-c "git log &gt; ${web.dir}/build.properties"'/>
        </exec>
        <!-- <property prefix="svn" file="${web.dir}/build.properties"/> -->
    </target>

    <!-- create war file -->
    <target name="create-war" depends="compile, update-info"
            description="Create WAR">
        <mkdir dir="${basedir}/distribution"/>
        <war destfile="${basedir}/distribution/${war.name}.war"
             webxml="${basedir}/web/WEB-INF/web.xml">
            <classes dir="${bin.dir}">
                <include name="**/**.*"/>
            </classes>
            <lib dir="${lib.dir}">
                <include name="*"/>
                <exclude name="servlet-api.jar"/>
            </lib>
        </war>
    </target>

    <!-- deploy war based on Jetty or Tomcat-->
    <target name="deploy-war" depends="create-war"
            description="Create and Deploy WAR">
        <!-- TODO validate whether it is Tomcat or jetty -->
        <antcall target="tomcat-shutdown"/>
        <delete dir="${tomcat.home}/webapps/${war.name}"/>
        <copy todir="${tomcat.home}/webapps">
            <fileset file="${basedir}/distribution/${war.name}.war"/>
        </copy>
        <antcall target="tomcat-startup"/>
    </target>

    <!-- start tomcat after deploying -->
    <target name="tomcat-startup">
        <java classname="org.apache.catalina.startup.Bootstrap" fork="yes">
            <jvmarg value="-Dcatalina.home=${tomcat.home}"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=8888,server=y,suspend=n"/>
            <arg value="start"/>
            <classpath>
                <fileset dir="${tomcat.home}">
                    <include name="bin/bootstrap.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>

    <!-- stop tomcat before deploying -->
    <target name="tomcat-shutdown">
        <java classname="org.apache.catalina.startup.Bootstrap" fork="yes">
            <jvmarg value="-Dcatalina.home=${tomcat.home}"/>
            <arg value="stop"/>
            <classpath>
                <fileset dir="${tomcat.home}">
                    <include name="bin/bootstrap.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>

</project>